#include <Arduino.h>
#include <EEPROM.h>
#include <ArduinoJson.h>
#include <WiFi.h>
#include <PubSubClient.h>
#include <ESPAsyncWebServer.h>
#include <AsyncTCP.h>
#include "SPIFFS.h"
// #include <DNSServer.h>
#include <LiquidCrystal.h>

// #include "DHTesp.h"

const int ADC_LUT[4096] = {0,
                           47, 58, 31, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79,
                           80, 82, 83, 85, 86, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99,
                           100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115,
                           116, 118, 120, 121, 123, 124, 126, 127, 128, 129, 130, 131, 131, 132, 133,
                           134, 135, 135, 136, 137, 138, 139, 139, 140, 141, 142, 142, 143, 145, 147,
                           150, 153, 156, 158, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 173,
                           174, 175, 176, 177, 178, 178, 179, 180, 181, 181, 182, 183, 183, 184, 185,
                           186, 186, 187, 188, 189, 189, 190, 191, 191, 193, 194, 196, 197, 199, 200,
                           202, 203, 205, 206, 208, 209, 210, 210, 211, 212, 213, 214, 215, 216, 217,
                           217, 218, 219, 220, 221, 222, 223, 223, 226, 231, 235, 240, 241, 241, 242,
                           243, 244, 244, 245, 246, 247, 247, 248, 249, 250, 251, 251, 252, 253, 254,
                           254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
                           269, 270, 271, 272, 273, 274, 274, 275, 276, 277, 278, 279, 280, 281, 281,
                           282, 283, 284, 285, 286, 287, 288, 289, 291, 293, 294, 296, 298, 300, 301,
                           303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 312, 313, 314, 315, 316,
                           317, 318, 319, 320, 321, 323, 324, 325, 327, 328, 330, 331, 333, 334, 336,
                           337, 339, 340, 342, 343, 345, 346, 348, 349, 350, 352, 353, 354, 354, 355,
                           356, 357, 358, 358, 359, 360, 361, 362, 363, 363, 364, 365, 366, 367, 367,
                           369, 370, 372, 373, 375, 376, 378, 379, 381, 382, 384, 384, 385, 386, 387,
                           388, 389, 390, 390, 391, 392, 393, 394, 395, 395, 396, 397, 398, 399, 400,
                           401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416,
                           417, 418, 420, 421, 422, 424, 425, 426, 427, 429, 430, 431, 432, 434, 435,
                           436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 451, 452,
                           453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468,
                           469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484,
                           485, 486, 487, 489, 490, 491, 492, 493, 494, 496, 497, 497, 498, 499, 500,
                           501, 502, 502, 503, 504, 505, 506, 507, 508, 508, 509, 510, 511, 512, 513,
                           514, 514, 515, 516, 517, 518, 519, 519, 520, 521, 522, 523, 524, 525, 525,
                           526, 527, 528, 530, 532, 534, 535, 537, 539, 541, 543, 544, 545, 546, 547,
                           547, 548, 549, 550, 551, 551, 552, 553, 554, 555, 555, 556, 557, 558, 559,
                           560, 561, 562, 564, 565, 567, 568, 569, 571, 572, 574, 575, 576, 577, 578,
                           579, 580, 581, 581, 582, 583, 584, 585, 586, 586, 587, 588, 589, 590, 591,
                           591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606,
                           607, 609, 610, 611, 613, 614, 615, 617, 618, 619, 621, 622, 624, 625, 625,
                           626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 635, 636, 637, 638, 639,
                           640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654,
                           655, 656, 657, 659, 660, 661, 663, 664, 666, 667, 668, 670, 671, 672, 673,
                           674, 675, 676, 677, 677, 678, 679, 680, 681, 682, 683, 683, 684, 685, 686,
                           687, 688, 689, 691, 692, 694, 695, 697, 698, 700, 701, 703, 704, 705, 707,
                           708, 709, 710, 711, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724,
                           725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739,
                           740, 741, 742, 743, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
                           754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770,
                           771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
                           786, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 801, 802, 803,
                           804, 806, 807, 808, 809, 810, 812, 813, 814, 815, 817, 818, 819, 820, 822,
                           823, 824, 826, 827, 828, 829, 831, 832, 833, 834, 835, 835, 836, 837, 838,
                           839, 840, 841, 842, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853,
                           855, 856, 857, 859, 860, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872,
                           874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 890,
                           891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906,
                           907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923,
                           924, 925, 926, 927, 928, 929, 930, 931, 932, 932, 933, 934, 935, 936, 936,
                           937, 938, 939, 940, 941, 941, 942, 943, 944, 946, 948, 950, 952, 954, 957,
                           959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973,
                           974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 987, 988, 989,
                           990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005,
                           1007, 1008, 1008, 1009, 1010, 1011, 1011, 1012, 1013, 1013, 1014, 1015, 1016, 1016, 1017,
                           1018, 1018, 1019, 1020, 1021, 1021, 1022, 1023, 1023, 1024, 1025, 1026, 1027, 1028, 1029,
                           1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,
                           1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059, 1060, 1061,
                           1063, 1064, 1065, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080,
                           1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089, 1089, 1090, 1091, 1092, 1092, 1093, 1094,
                           1095, 1095, 1096, 1097, 1098, 1098, 1099, 1100, 1101, 1101, 1102, 1103, 1104, 1105, 1107,
                           1109, 1112, 1114, 1116, 1118, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1127, 1128,
                           1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144,
                           1145, 1146, 1147, 1148, 1149, 1150, 1151, 1153, 1154, 1155, 1157, 1158, 1160, 1161, 1162,
                           1164, 1165, 1167, 1168, 1169, 1170, 1171, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178,
                           1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192,
                           1193, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208,
                           1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223,
                           1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238,
                           1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1248, 1249, 1250, 1251, 1253, 1254, 1255,
                           1257, 1258, 1259, 1260, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1269, 1270, 1271,
                           1272, 1273, 1274, 1275, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1283, 1284, 1286, 1287,
                           1289, 1290, 1292, 1293, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1304, 1305, 1306,
                           1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1316, 1317, 1318, 1319, 1320,
                           1320, 1321, 1322, 1323, 1324, 1324, 1325, 1326, 1327, 1328, 1329, 1331, 1333, 1335, 1337,
                           1339, 1341, 1343, 1344, 1345, 1346, 1347, 1347, 1348, 1349, 1350, 1351, 1352, 1352, 1353,
                           1354, 1355, 1356, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1365, 1366, 1367, 1368,
                           1370, 1371, 1372, 1373, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385,
                           1386, 1387, 1388, 1389, 1390, 1391, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401,
                           1402, 1403, 1404, 1405, 1407, 1408, 1409, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416,
                           1417, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1427, 1428, 1430, 1432, 1433,
                           1435, 1437, 1438, 1440, 1441, 1442, 1444, 1445, 1446, 1447, 1449, 1450, 1451, 1452, 1454,
                           1455, 1456, 1457, 1458, 1459, 1460, 1461, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468,
                           1469, 1470, 1470, 1471, 1472, 1474, 1475, 1476, 1478, 1479, 1480, 1481, 1483, 1484, 1485,
                           1487, 1488, 1488, 1489, 1490, 1490, 1491, 1492, 1492, 1493, 1494, 1494, 1495, 1496, 1496,
                           1497, 1498, 1498, 1499, 1500, 1500, 1501, 1502, 1502, 1503, 1503, 1505, 1508, 1511, 1514,
                           1517, 1520, 1521, 1522, 1523, 1524, 1526, 1527, 1528, 1529, 1530, 1531, 1533, 1534, 1535,
                           1536, 1537, 1538, 1538, 1539, 1540, 1541, 1542, 1542, 1543, 1544, 1545, 1546, 1547, 1547,
                           1548, 1549, 1550, 1551, 1551, 1552, 1553, 1554, 1554, 1555, 1556, 1557, 1557, 1558, 1559,
                           1560, 1560, 1561, 1562, 1562, 1563, 1564, 1565, 1565, 1566, 1567, 1568, 1570, 1573, 1576,
                           1580, 1583, 1584, 1585, 1586, 1587, 1587, 1588, 1589, 1590, 1591, 1591, 1592, 1593, 1594,
                           1594, 1595, 1596, 1597, 1598, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607,
                           1608, 1609, 1610, 1611, 1613, 1614, 1615, 1616, 1617, 1617, 1618, 1619, 1620, 1621, 1622,
                           1623, 1624, 1625, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1635, 1638, 1640,
                           1642, 1644, 1646, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1654, 1655, 1656, 1657, 1658,
                           1659, 1660, 1661, 1662, 1663, 1664, 1665, 1667, 1669, 1670, 1672, 1673, 1675, 1676, 1678,
                           1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694,
                           1695, 1696, 1697, 1697, 1698, 1699, 1700, 1701, 1701, 1702, 1703, 1704, 1705, 1705, 1706,
                           1707, 1708, 1709, 1709, 1710, 1711, 1712, 1714, 1716, 1718, 1720, 1722, 1724, 1726, 1728,
                           1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1741, 1742, 1743, 1744,
                           1744, 1745, 1745, 1746, 1746, 1747, 1747, 1748, 1748, 1749, 1749, 1750, 1751, 1751, 1752,
                           1752, 1753, 1753, 1754, 1754, 1755, 1755, 1756, 1756, 1757, 1757, 1758, 1758, 1759, 1759,
                           1760, 1763, 1766, 1769, 1772, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784,
                           1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799,
                           1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1810, 1812, 1814, 1815, 1817, 1819,
                           1821, 1822, 1824, 1825, 1825, 1826, 1827, 1827, 1828, 1829, 1829, 1830, 1831, 1832, 1832,
                           1833, 1834, 1834, 1835, 1836, 1836, 1837, 1838, 1838, 1839, 1840, 1841, 1843, 1844, 1845,
                           1847, 1848, 1849, 1851, 1852, 1853, 1855, 1856, 1857, 1858, 1860, 1861, 1862, 1863, 1864,
                           1865, 1866, 1867, 1868, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880,
                           1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1894,
                           1895, 1896, 1897, 1898, 1899, 1900, 1901, 1901, 1902, 1903, 1904, 1906, 1908, 1910, 1912,
                           1913, 1915, 1917, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1929,
                           1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1941, 1942, 1943, 1944, 1945,
                           1946, 1948, 1949, 1950, 1951, 1952, 1954, 1956, 1957, 1959, 1961, 1962, 1964, 1965, 1967,
                           1969, 1970, 1971, 1972, 1974, 1975, 1976, 1978, 1979, 1980, 1981, 1983, 1984, 1985, 1986,
                           1986, 1987, 1988, 1989, 1990, 1991, 1991, 1992, 1993, 1994, 1995, 1996, 1996, 1997, 1998,
                           1999, 2000, 2002, 2004, 2006, 2008, 2010, 2011, 2013, 2015, 2016, 2017, 2018, 2019, 2020,
                           2021, 2022, 2023, 2024, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2032, 2033,
                           2034, 2035, 2035, 2036, 2037, 2038, 2039, 2039, 2040, 2041, 2042, 2043, 2043, 2044, 2045,
                           2046, 2046, 2047, 2048, 2049, 2050, 2050, 2051, 2052, 2053, 2054, 2055, 2055, 2056, 2057,
                           2058, 2059, 2059, 2060, 2061, 2062, 2063, 2063, 2064, 2066, 2067, 2068, 2069, 2070, 2071,
                           2072, 2073, 2074, 2076, 2077, 2078, 2079, 2080, 2081, 2083, 2084, 2085, 2087, 2088, 2089,
                           2091, 2092, 2094, 2095, 2096, 2097, 2098, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107,
                           2109, 2110, 2111, 2112, 2113, 2114, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2120, 2121,
                           2122, 2123, 2124, 2125, 2125, 2126, 2127, 2128, 2130, 2132, 2133, 2135, 2137, 2138, 2140,
                           2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2150, 2151, 2152, 2153, 2154, 2155,
                           2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164, 2166, 2167, 2168, 2169, 2170,
                           2172, 2173, 2174, 2175, 2177, 2178, 2179, 2180, 2182, 2183, 2184, 2185, 2187, 2188, 2189,
                           2190, 2192, 2193, 2194, 2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201, 2202, 2203, 2204,
                           2204, 2205, 2206, 2207, 2208, 2210, 2212, 2214, 2215, 2217, 2219, 2220, 2222, 2224, 2225,
                           2226, 2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235, 2236, 2237, 2238, 2239, 2240,
                           2242, 2243, 2245, 2246, 2247, 2249, 2250, 2252, 2253, 2254, 2256, 2257, 2258, 2259, 2260,
                           2261, 2262, 2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274, 2274,
                           2275, 2276, 2277, 2277, 2278, 2279, 2280, 2280, 2281, 2282, 2282, 2283, 2284, 2285, 2285,
                           2286, 2287, 2288, 2289, 2292, 2294, 2297, 2299, 2302, 2304, 2305, 2305, 2306, 2307, 2307,
                           2308, 2309, 2309, 2310, 2311, 2311, 2312, 2313, 2313, 2314, 2315, 2315, 2316, 2317, 2317,
                           2318, 2319, 2319, 2320, 2321, 2322, 2323, 2325, 2326, 2327, 2328, 2329, 2330, 2331, 2332,
                           2333, 2334, 2335, 2336, 2337, 2339, 2340, 2341, 2343, 2344, 2345, 2347, 2348, 2349, 2351,
                           2352, 2353, 2354, 2355, 2356, 2357, 2358, 2360, 2361, 2362, 2363, 2364, 2365, 2366, 2367,
                           2368, 2369, 2371, 2372, 2373, 2375, 2376, 2377, 2378, 2380, 2381, 2382, 2384, 2385, 2385,
                           2386, 2387, 2388, 2389, 2390, 2391, 2392, 2392, 2393, 2394, 2395, 2396, 2397, 2398, 2398,
                           2399, 2400, 2402, 2403, 2404, 2406, 2407, 2408, 2409, 2411, 2412, 2413, 2415, 2416, 2417,
                           2418, 2418, 2419, 2420, 2421, 2422, 2423, 2423, 2424, 2425, 2426, 2427, 2427, 2428, 2429,
                           2430, 2431, 2432, 2435, 2440, 2445, 2448, 2449, 2450, 2451, 2452, 2453, 2454, 2455, 2456,
                           2457, 2458, 2459, 2460, 2461, 2462, 2463, 2464, 2465, 2466, 2467, 2469, 2470, 2471, 2473,
                           2474, 2475, 2476, 2478, 2479, 2480, 2481, 2482, 2483, 2484, 2485, 2486, 2487, 2488, 2489,
                           2490, 2490, 2491, 2492, 2493, 2494, 2495, 2496, 2497, 2499, 2500, 2501, 2503, 2504, 2505,
                           2507, 2508, 2509, 2511, 2512, 2513, 2514, 2514, 2515, 2516, 2517, 2518, 2518, 2519, 2520,
                           2521, 2522, 2523, 2523, 2524, 2525, 2526, 2527, 2527, 2529, 2530, 2532, 2534, 2536, 2537,
                           2539, 2541, 2542, 2544, 2544, 2545, 2545, 2545, 2546, 2546, 2546, 2547, 2547, 2548, 2548,
                           2548, 2549, 2549, 2549, 2550, 2550, 2551, 2551, 2551, 2552, 2552, 2552, 2553, 2553, 2554,
                           2554, 2554, 2555, 2555, 2555, 2556, 2556, 2557, 2557, 2557, 2558, 2575, 2577, 2578, 2579,
                           2562, 2581, 2582, 2583, 2584, 2585, 2586, 2587, 2588, 2589, 2590, 2591, 2591, 2592, 2593,
                           2595, 2596, 2597, 2598, 2599, 2600, 2601, 2602, 2603, 2604, 2605, 2606, 2607, 2608, 2609,
                           2610, 2612, 2613, 2614, 2616, 2617, 2618, 2620, 2621, 2622, 2624, 2624, 2625, 2626, 2627,
                           2628, 2628, 2629, 2630, 2631, 2632, 2632, 2633, 2634, 2635, 2636, 2636, 2637, 2638, 2639,
                           2640, 2642, 2644, 2647, 2649, 2652, 2654, 2656, 2657, 2658, 2658, 2659, 2660, 2661, 2662,
                           2663, 2663, 2664, 2665, 2666, 2667, 2667, 2668, 2669, 2670, 2671, 2671, 2673, 2676, 2679,
                           2682, 2685, 2688, 2689, 2690, 2691, 2692, 2694, 2695, 2696, 2697, 2698, 2699, 2700, 2701,
                           2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2715, 2716,
                           2717, 2717, 2718, 2719, 2720, 2721, 2722, 2724, 2725, 2726, 2727, 2728, 2729, 2730, 2731,
                           2732, 2733, 2735, 2736, 2737, 2738, 2739, 2740, 2741, 2742, 2743, 2744, 2745, 2746, 2747,
                           2748, 2749, 2750, 2751, 2752, 2753, 2754, 2755, 2756, 2757, 2758, 2760, 2761, 2762, 2763,
                           2764, 2765, 2766, 2767, 2769, 2770, 2772, 2773, 2775, 2776, 2777, 2779, 2780, 2782, 2783,
                           2784, 2785, 2786, 2787, 2787, 2788, 2789, 2790, 2790, 2791, 2792, 2793, 2793, 2794, 2795,
                           2796, 2796, 2797, 2798, 2799, 2799, 2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808,
                           2809, 2809, 2810, 2811, 2812, 2813, 2814, 2815, 2816, 2817, 2819, 2820, 2822, 2823, 2825,
                           2826, 2828, 2829, 2831, 2832, 2833, 2834, 2834, 2835, 2836, 2837, 2837, 2838, 2839, 2840,
                           2840, 2841, 2842, 2843, 2844, 2844, 2845, 2846, 2847, 2847, 2848, 2849, 2851, 2852, 2853,
                           2854, 2855, 2856, 2857, 2858, 2860, 2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868, 2869,
                           2870, 2870, 2871, 2872, 2873, 2874, 2875, 2876, 2877, 2878, 2879, 2880, 2881, 2881, 2882,
                           2883, 2884, 2885, 2886, 2887, 2888, 2889, 2890, 2891, 2892, 2893, 2894, 2895, 2896, 2897,
                           2898, 2899, 2900, 2901, 2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910, 2911,
                           2912, 2914, 2916, 2919, 2921, 2923, 2925, 2927, 2928, 2929, 2930, 2931, 2932, 2933, 2934,
                           2934, 2935, 2936, 2937, 2938, 2939, 2940, 2941, 2941, 2942, 2943, 2944, 2947, 2949, 2951,
                           2954, 2956, 2958, 2960, 2961, 2962, 2962, 2963, 2964, 2965, 2965, 2966, 2967, 2968, 2968,
                           2969, 2970, 2971, 2971, 2972, 2973, 2974, 2974, 2975, 2976, 2977, 2978, 2979, 2980, 2981,
                           2982, 2983, 2983, 2984, 2985, 2986, 2987, 2988, 2989, 2990, 2991, 2992, 2993, 2994, 2995,
                           2996, 2998, 2999, 3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3009, 3011, 3013, 3015,
                           3017, 3019, 3021, 3022, 3024, 3025, 3026, 3027, 3028, 3030, 3031, 3032, 3033, 3034, 3035,
                           3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3045, 3046, 3047, 3047, 3048, 3049,
                           3050, 3051, 3052, 3053, 3054, 3055, 3056, 3056, 3057, 3058, 3059, 3060, 3060, 3061, 3062,
                           3063, 3063, 3064, 3065, 3066, 3067, 3067, 3068, 3069, 3070, 3070, 3071, 3072, 3073, 3074,
                           3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3082, 3083, 3084, 3085, 3086, 3087, 3088,
                           3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3100, 3101, 3102, 3103, 3104,
                           3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3114, 3115, 3116, 3117, 3118, 3119, 3120,
                           3121, 3122, 3123, 3124, 3125, 3126, 3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136,
                           3137, 3138, 3139, 3140, 3141, 3142, 3143, 3144, 3145, 3147, 3148, 3149, 3150, 3151, 3152,
                           3153, 3154, 3155, 3156, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3167, 3168, 3168,
                           3169, 3170, 3170, 3171, 3171, 3172, 3173, 3173, 3174, 3174, 3175, 3176, 3176, 3177, 3178,
                           3178, 3179, 3179, 3180, 3181, 3181, 3182, 3182, 3183, 3184, 3186, 3190, 3194, 3198, 3200,
                           3201, 3202, 3203, 3205, 3206, 3207, 3208, 3209, 3210, 3211, 3212, 3213, 3214, 3215, 3216,
                           3217, 3217, 3218, 3219, 3220, 3220, 3221, 3222, 3223, 3223, 3224, 3225, 3226, 3226, 3227,
                           3228, 3229, 3229, 3230, 3231, 3232, 3233, 3234, 3235, 3236, 3237, 3238, 3239, 3240, 3241,
                           3242, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3250, 3251, 3252, 3253, 3254, 3254, 3255,
                           3256, 3257, 3258, 3258, 3259, 3260, 3261, 3262, 3263, 3263, 3264, 3266, 3267, 3269, 3270,
                           3272, 3273, 3275, 3276, 3278, 3279, 3280, 3281, 3282, 3283, 3284, 3285, 3286, 3287, 3288,
                           3289, 3290, 3290, 3291, 3292, 3293, 3294, 3295, 3296, 3297, 3298, 3298, 3299, 3300, 3301,
                           3302, 3302, 3303, 3304, 3305, 3306, 3306, 3307, 3308, 3309, 3310, 3310, 3311, 3312, 3313,
                           3314, 3315, 3316, 3317, 3318, 3318, 3319, 3320, 3321, 3322, 3323, 3324, 3325, 3326, 3327,
                           3328, 3329, 3330, 3332, 3333, 3334, 3336, 3337, 3338, 3340, 3341, 3342, 3344, 3344, 3345,
                           3345, 3346, 3346, 3347, 3347, 3348, 3348, 3349, 3349, 3350, 3350, 3351, 3351, 3352, 3352,
                           3353, 3353, 3354, 3354, 3355, 3355, 3356, 3356, 3357, 3357, 3358, 3358, 3359, 3360, 3360,
                           3361, 3363, 3364, 3365, 3366, 3367, 3369, 3370, 3371, 3372, 3373, 3375, 3376, 3377, 3378,
                           3379, 3380, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389, 3390, 3391, 3392, 3392,
                           3393, 3394, 3395, 3395, 3396, 3397, 3398, 3398, 3399, 3400, 3401, 3401, 3402, 3403, 3404,
                           3404, 3405, 3406, 3407, 3407, 3408, 3409, 3410, 3411, 3412, 3413, 3414, 3415, 3416, 3417,
                           3418, 3419, 3420, 3421, 3422, 3423, 3424, 3424, 3425, 3426, 3427, 3428, 3429, 3430, 3431,
                           3432, 3433, 3433, 3434, 3435, 3436, 3437, 3438, 3439, 3440, 3441, 3442, 3443, 3444, 3446,
                           3447, 3448, 3449, 3450, 3451, 3453, 3454, 3455, 3456, 3457, 3457, 3458, 3458, 3459, 3459,
                           3460, 3461, 3461, 3462, 3462, 3463, 3464, 3464, 3465, 3465, 3466, 3467, 3467, 3468, 3468,
                           3469, 3469, 3470, 3471, 3471, 3472, 3480, 3488, 3488, 3489, 3489, 3490, 3490, 3491, 3492,
                           3492, 3493, 3493, 3494, 3494, 3495, 3495, 3496, 3496, 3497, 3497, 3498, 3498, 3499, 3499,
                           3500, 3500, 3501, 3502, 3502, 3503, 3503, 3504, 3504, 3505, 3506, 3507, 3507, 3508, 3509,
                           3510, 3511, 3511, 3512, 3513, 3514, 3514, 3515, 3516, 3517, 3518, 3518, 3519, 3520, 3521,
                           3521, 3522, 3523, 3523, 3524, 3525, 3525, 3526, 3527, 3528, 3528, 3529, 3530, 3530, 3531,
                           3532, 3532, 3533, 3534, 3535, 3535, 3536, 3537, 3537, 3538, 3539, 3540, 3541, 3541, 3542,
                           3543, 3544, 3544, 3545, 3546, 3547, 3547, 3548, 3549, 3550, 3550, 3551, 3552, 3553, 3554,
                           3555, 3556, 3556, 3557, 3558, 3559, 3560, 3561, 3562, 3563, 3564, 3565, 3566, 3566, 3567,
                           3568, 3569, 3569, 3570, 3570, 3571, 3571, 3572, 3573, 3573, 3574, 3574, 3575, 3575, 3576,
                           3576, 3577, 3578, 3578, 3579, 3579, 3580, 3580, 3581, 3582, 3582, 3583, 3583, 3584, 3585,
                           3586, 3587, 3588, 3589, 3590, 3591, 3592, 3593, 3594, 3595, 3597, 3598, 3599, 3600, 3601,
                           3602, 3603, 3604, 3605, 3606, 3607, 3608, 3609, 3610, 3612, 3613, 3614, 3615, 3616, 3616,
                           3617, 3617, 3617, 3618, 3618, 3619, 3619, 3619, 3620, 3620, 3621, 3621, 3622, 3622, 3622,
                           3623, 3623, 3624, 3624, 3624, 3625, 3625, 3626, 3626, 3626, 3627, 3627, 3628, 3628, 3628,
                           3629, 3629, 3630, 3630, 3630, 3631, 3631, 3632, 3633, 3634, 3636, 3637, 3639, 3640, 3642,
                           3643, 3645, 3646, 3648, 3649, 3649, 3650, 3650, 3651, 3652, 3652, 3653, 3654, 3654, 3655,
                           3656, 3656, 3657, 3658, 3658, 3659, 3660, 3660, 3661, 3661, 3662, 3663, 3663, 3664, 3665,
                           3665, 3666, 3666, 3667, 3668, 3668, 3669, 3669, 3670, 3670, 3671, 3672, 3672, 3673, 3673,
                           3674, 3674, 3675, 3676, 3676, 3677, 3677, 3678, 3678, 3679, 3680, 3680, 3681, 3682, 3682,
                           3683, 3684, 3684, 3685, 3686, 3686, 3687, 3688, 3688, 3689, 3690, 3690, 3691, 3691, 3692,
                           3693, 3693, 3694, 3695, 3695, 3696, 3697, 3697, 3698, 3699, 3699, 3700, 3701, 3701, 3702,
                           3702, 3703, 3704, 3704, 3705, 3706, 3706, 3707, 3708, 3708, 3709, 3709, 3710, 3711, 3711,
                           3712, 3713, 3714, 3715, 3716, 3717, 3719, 3720, 3721, 3722, 3723, 3724, 3725, 3726, 3727,
                           3728, 3729, 3729, 3730, 3730, 3731, 3732, 3732, 3733, 3734, 3734, 3735, 3735, 3736, 3737,
                           3737, 3738, 3739, 3739, 3740, 3740, 3741, 3742, 3742, 3743, 3744, 3744, 3745, 3745, 3746,
                           3746, 3747, 3747, 3748, 3748, 3749, 3750, 3750, 3751, 3751, 3752, 3752, 3753, 3753, 3754,
                           3754, 3755, 3755, 3756, 3756, 3757, 3758, 3758, 3759, 3759, 3760, 3760, 3761, 3762, 3762,
                           3763, 3764, 3764, 3765, 3766, 3767, 3767, 3768, 3769, 3769, 3770, 3771, 3771, 3772, 3773,
                           3773, 3774, 3775, 3775, 3776, 3777, 3777, 3778, 3779, 3779, 3780, 3781, 3781, 3782, 3782,
                           3783, 3784, 3784, 3785, 3786, 3786, 3787, 3788, 3788, 3789, 3789, 3790, 3791, 3791, 3792,
                           3793, 3793, 3794, 3794, 3795, 3795, 3796, 3797, 3797, 3798, 3798, 3799, 3800, 3800, 3801,
                           3801, 3802, 3802, 3803, 3804, 3804, 3805, 3805, 3806, 3807, 3807, 3808, 3808, 3809, 3810,
                           3811, 3811, 3812, 3813, 3814, 3814, 3815, 3816, 3816, 3817, 3818, 3819, 3819, 3820, 3821,
                           3822, 3822, 3823, 3824, 3824, 3825, 3825, 3826, 3826, 3826, 3827, 3827, 3828, 3828, 3829,
                           3829, 3830, 3830, 3830, 3831, 3831, 3832, 3832, 3833, 3833, 3833, 3834, 3834, 3835, 3835,
                           3836, 3836, 3837, 3837, 3837, 3838, 3838, 3839, 3839, 3840, 3840, 3841, 3842, 3842, 3843,
                           3844, 3845, 3845, 3846, 3847, 3847, 3848, 3849, 3850, 3850, 3851, 3852, 3852, 3853, 3854,
                           3855, 3855, 3856, 3857, 3857, 3858, 3859, 3860, 3860, 3861, 3862, 3863, 3863, 3864, 3865,
                           3866, 3866, 3867, 3868, 3868, 3869, 3870, 3871, 3871, 3872, 3873, 3873, 3874, 3874, 3875,
                           3876, 3876, 3877, 3878, 3878, 3879, 3879, 3880, 3881, 3881, 3882, 3882, 3883, 3884, 3884,
                           3885, 3886, 3886, 3887, 3887, 3888, 3888, 3889, 3889, 3890, 3890, 3890, 3891, 3891, 3892,
                           3892, 3892, 3893, 3893, 3894, 3894, 3894, 3895, 3895, 3896, 3896, 3896, 3897, 3897, 3898,
                           3898, 3898, 3899, 3899, 3900, 3900, 3900, 3901, 3901, 3902, 3902, 3902, 3903, 3903, 3904,
                           3904, 3905, 3906, 3907, 3907, 3908, 3909, 3910, 3911, 3911, 3912, 3913, 3914, 3914, 3915,
                           3916, 3917, 3918, 3918, 3919, 3920, 3921, 3921, 3922, 3923, 3923, 3924, 3924, 3925, 3926,
                           3926, 3927, 3928, 3928, 3929, 3930, 3930, 3931, 3932, 3932, 3933, 3934, 3934, 3935, 3935,
                           3936, 3937, 3937, 3938, 3938, 3939, 3939, 3940, 3940, 3941, 3941, 3942, 3942, 3943, 3943,
                           3944, 3944, 3945, 3945, 3946, 3946, 3947, 3947, 3948, 3948, 3949, 3949, 3950, 3951, 3951,
                           3952, 3952, 3953, 3953, 3954, 3955, 3955, 3956, 3956, 3957, 3958, 3958, 3959, 3960, 3960,
                           3961, 3962, 3962, 3963, 3963, 3964, 3965, 3965, 3966, 3967, 3967, 3968, 3968, 3969, 3969,
                           3970, 3970, 3971, 3971, 3972, 3972, 3972, 3973, 3973, 3974, 3974, 3975, 3975, 3976, 3976,
                           3977, 3977, 3978, 3978, 3979, 3979, 3979, 3980, 3980, 3981, 3981, 3982, 3982, 3983, 3983,
                           3984, 3984, 3985, 3986, 3986, 3987, 3987, 3988, 3989, 3989, 3990, 3991, 3991, 3992, 3993,
                           3993, 3994, 3995, 3995, 3996, 3996, 3997, 3998, 3998, 3999, 4000, 4000, 4001, 4002, 4002,
                           4003, 4004, 4004, 4005, 4006, 4006, 4007, 4008, 4008, 4009, 4010, 4010, 4011, 4011, 4012,
                           4013, 4013, 4014, 4015, 4015, 4016, 4017, 4017, 4018, 4018, 4019, 4019, 4020, 4021, 4021,
                           4022, 4022, 4023, 4023, 4024, 4024, 4025, 4026, 4026, 4027, 4027, 4028, 4028, 4029, 4030,
                           4030, 4031, 4031, 4032, 4032, 4033, 4034, 4034, 4035, 4035, 4036, 4037, 4037, 4038, 4038,
                           4039, 4040, 4040, 4041, 4042, 4042, 4043, 4043, 4044, 4045, 4045, 4046, 4046, 4047, 4048};
#define VIN 6206
const int NUM_ROW = 4;                 // So dong keypad
const int NUM_COL = 4;                 // So cot keypad
const unsigned int MQTT_PORT = 1883;   // Port của CloudMQTT TCP
const unsigned int BAUD_RATE = 115200; // Tốc độ giao tiếp UART BAUD_RATE bit/s
const unsigned int CALIBRATION_SAMPLE_INTERVAL = 500;
const unsigned int WAIT_FOR_WIFI_CONNECTION_INTERVAL = 10000;
const unsigned int SEND_PPM_VALUE_INTERVAL = 1000;

const float R5 = 5100;
const float R6 = 10000;
const float RL = 937.89;
const float CLEAN_AIR_RAITO = 9.5;

const char CALIBARAION_SAMPLE_TIMES = 50;
const char MQ_PIN = 34;
const char LED_PIN = 2;
const char SPEAKER_PIN = 4;
const char READ_SAMPLE_INTERVAL = 20;
const char READ_SAMPLE_TIMES = 5;
const char RO_VALUE_ADDRESS = 0;
const char PPMTHRESOLD_VALUE_ADDRESS = 4;
const char IS_WIFI_ADDRESS = 12;
const char SSID_ADDRESS = 80;
const char PASS_ADDRESS = 110;
const char INIT_THRESOLD_ADDRESS = 140;

const unsigned char EEPROM_SIZE = 200;
const char *PARAM_INPUT_1 = "ssid";
const char *PARAM_INPUT_2 = "pass";
const char *MQTT_SERVER = "116.118.48.230"; // ip broker mqtt
const char *MQTT_USER = "doan2";            // Tài khoản đăng nhập broker
const char *MQTT_PWD = "doan2";             // Mật khẩu đăng nhập broker

// Variables to save values from HTML form
String html = "";
String selectSsid = "";

String ssid = "NhanSgu";
String pass = "1";

float Ro = 0;
unsigned long previousMillisAlarm = 0;
unsigned long previousMillis = 0;
unsigned long currentTimeSendPPMval = 0;
unsigned long PPMval = 0;
unsigned long PPMThresold = 1800;
bool isAlarm = false;
bool isWiFi = false;
bool isWiFiDone = false;
bool initThresold = false;

char cstr[255]; // mảng dữ liệu gửi lên broker

const char KEYS[NUM_ROW][NUM_COL] = {
    {'1', '2', '3', '4'},
    {'5', '6', '7', '8'},
    {'9', '0', 'S', 'D'},  // S: Đặt ngưỡng ppm, D: đặt xong bấm nút này để ghi nhận
    {'F', 'W', 'O', 'C'}}; // F: Tìm Ro, W: bật/tắt Wifi, O: Tắt báo động, C: Thay đổi wifi
const char COL_PINS[NUM_COL] = {12, 13, 14, 15};
const char ROW_PINS[NUM_ROW] = {16, 17, 18, 19};
bool pushed[NUM_ROW][NUM_COL] = {
    {false, false, false, false},
    {false, false, false, false},
    {false, false, false, false},
    {false, false, false, false}};

const char rs = 21, en = 22, d4 = 23, d5 = 25, d6 = 26, d7 = 27;
LiquidCrystal lcd16x2(rs, en, d4, d5, d6, d7);
// DNSServer dnsServer;
AsyncWebServer server(80);
WiFiClient wifiClient;
PubSubClient pubSubClient(wifiClient);
StaticJsonDocument<200> jsonBuffer;
DynamicJsonDocument doc(2048); // Khởi tạo document Jon động với dữ liệu được lưu trong bộ nhớ heap

float findRo(void);
float findRs(void);
int findPPM();

bool initWiFi(void);
bool configWiFiMqtt();
bool debounceButton(char pin);

char readKeypad(void);

void initLcd(void);
void initEpprom(void);
void initSPIFFS(void);
void initPinMode(void);
void setupWiFi(char mode); /*
                          mode=0: on off wifi
                          mode=1: change wifi
                         */
void setupServer(void);
void blink(int f);
void changeWiFi();
void callback(char *topic, byte *payload, unsigned int length);
void reconnect(void);
void sendPPMval(void);
void setPPMThresold(void);
void createJson(void);
void wifiManager(void);
void lcdPrint(char mode); /*
                            mode=0: ganeral
                            mode=1: set PPM Thresold
                            mode=2: on off wifi
                            mode=3: find ro
                            mode=4: change wifi
                          */
void scanNetworks(void);

void setup()
{
  Serial.begin(BAUD_RATE);
  initEpprom();

  previousMillisAlarm = millis();
  initLcd();
  initPinMode();
  initSPIFFS();
  blink(2);
  if (isWiFi)
    setupWiFi(0);
}

void loop()
{

  PPMval = findPPM();
  if (PPMval > PPMThresold)
  {
    if (!isAlarm)
    {
      // nếu như không có bật loa mà trong vòng 5s vẫn vượt ngưỡng thì báo động
      if ((unsigned long)(millis() - previousMillisAlarm) >= 5000)
      {
        isAlarm = true;
        digitalWrite(SPEAKER_PIN, 1);
      }
    }
  }
  lcdPrint(0);
  char keyPressed = readKeypad();
  if (keyPressed != 0)
    Serial.println(keyPressed);

  switch (keyPressed)
  {
  case 'F':
    findRo();
    break;
  case 'S':
    setPPMThresold();
    break;
  case 'W':
    digitalWrite(LED_PIN, 0);
    isWiFi = !isWiFi;
    EEPROM.put(IS_WIFI_ADDRESS, isWiFi);
    delay(5);
    EEPROM.commit();
    delay(5);
    blink(2);
    setupWiFi(0);
    break;
  case 'C':
    digitalWrite(LED_PIN, 0);
    blink(3);
    setupWiFi(1);
    break;
  case 'O':
    isAlarm = false;
    previousMillisAlarm = millis();
    digitalWrite(SPEAKER_PIN, 0);
    break;
  }

  if (WiFi.status() == WL_CONNECTED)
  {
    if (!pubSubClient.connected()) // Kiểm tra kết nối
      reconnect();
    sendPPMval();
    pubSubClient.loop();
  }
}

// class CaptiveRequestHandler : public AsyncWebHandler
// {
// public:
//   CaptiveRequestHandler() {}
//   virtual ~CaptiveRequestHandler() {}

//   bool canHandle(AsyncWebServerRequest *request)
//   {
//     // request->addInterestingHeader("ANY");
//     return true;
//   }

//   void handleRequest(AsyncWebServerRequest *request)
//   {
//     request->send(SPIFFS, "/wifimanager.html", "text/html", false, processor);
//   }
// }
void initEpprom()
{
  EEPROM.begin(EEPROM_SIZE);
  EEPROM.get(SSID_ADDRESS, ssid);
  delay(5);
  EEPROM.get(PASS_ADDRESS, pass);
  delay(5);
  EEPROM.get(INIT_THRESOLD_ADDRESS, initThresold);
  delay(5);
  Serial.println("initThresold: ");
  Serial.println(initThresold);
  if (initThresold)
  {
    Serial.println("init start: ");
    PPMThresold = 1800;
    EEPROM.put(PPMTHRESOLD_VALUE_ADDRESS, PPMThresold);
    delay(5);
    Ro = 3200.0;
    EEPROM.put(RO_VALUE_ADDRESS, Ro);
    delay(5);
    initThresold = false;
    EEPROM.put(INIT_THRESOLD_ADDRESS, initThresold);
    delay(5);
    EEPROM.commit();
    delay(5);
    Serial.println("init DONE");
  }
  EEPROM.get(RO_VALUE_ADDRESS, Ro);
  delay(5);

  EEPROM.get(PPMTHRESOLD_VALUE_ADDRESS, PPMThresold);
  delay(5);

  EEPROM.get(IS_WIFI_ADDRESS, isWiFi);
  delay(5);

  Serial.println();
  Serial.print("ssid: ");
  Serial.println(ssid);
  Serial.print("pass: ");
  Serial.println(pass);
  Serial.print("Ro: ");
  Serial.println(Ro);
  Serial.print("PPM thresold from EEPROM: ");
  Serial.println(PPMThresold);
  Serial.println(isWiFi ? "Online mode" : "Offline mode");
}

void blink(int f)
{
  int delayTime = 1000 / (f * 2);
  for (int i = 0; i < f * 2; i++)
  {
    digitalWrite(LED_PIN, !digitalRead(LED_PIN));
    delay(delayTime);
  }
  digitalWrite(LED_PIN, 0);
}

void initLcd()
{
  lcd16x2.begin(16, 2);
  lcd16x2.clear();
  //   lcd16x2.clear();
  //   lcd16x2.setCursor(1, 0);
  //   lcd16x2.print("He thong nhung");
  //   lcd16x2.setCursor(3, 1);
  //   lcd16x2.print("3119510032");
  //   delay(2000);
  //   lcd16x2.setCursor(3, 1);
  //   lcd16x2.print("3118510057");
  //   delay(2000);
  // }
}
bool initWiFi()
{
  if (ssid == "")
  {
    Serial.println("Undefined SSID or IP address.");
    return false;
  }
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid.c_str(), pass.c_str());
  lcd16x2.setCursor(0, 1);
  lcd16x2.print("Connecting.....");
  Serial.println("Connecting.....");

  unsigned long currentMillis = millis();
  previousMillis = currentMillis;

  while (WiFi.status() != WL_CONNECTED)
  {
    currentMillis = millis();
    if ((unsigned long)(currentMillis - previousMillis) >= WAIT_FOR_WIFI_CONNECTION_INTERVAL)
    {
      lcd16x2.setCursor(0, 1);
      lcd16x2.print("Failed !        ");
      Serial.println("Failed to connect");
      return false;
    }
  }
  Serial.println("");
  lcd16x2.setCursor(0, 0);
  lcd16x2.print("WiFi connected");
  delay(500);
  return true;
}

void initPinMode()
{

  for (char r = 0; r < NUM_ROW; r++)
  {
    pinMode(ROW_PINS[r], INPUT_PULLUP);
  }
  for (char c = 0; c < NUM_COL; c++)
  {
    pinMode(COL_PINS[c], OUTPUT);
  }
  pinMode(LED_PIN, OUTPUT);
  pinMode(SPEAKER_PIN, OUTPUT);
}

void initSPIFFS()
{
  if (!SPIFFS.begin(true))
  {
    Serial.println("An error has occurred while mounting SPIFFS");
  }
  Serial.println("SPIFFS mounted successfully");
}

void setupServer()
{
  File fileHtml = SPIFFS.open("/wifimanager.html", "r");
  if (fileHtml)
  {
    if (fileHtml.available())
    {
      html = fileHtml.readString();
      Serial.print("SSID form EEPROM: ");
      Serial.println(ssid);
      Serial.print("Password form EEPROM: ");
      Serial.println(pass);
      html.replace("ssidXyz", selectSsid);
      if (pass != "")
      {
        html.replace("passXyz", pass);
      }
    }
    fileHtml.close();
  }
  else
    Serial.println("error on opening file");

  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request)
            { request->send(200, "text/html", html); });

  // Web Server Root URL
  server.serveStatic("/", SPIFFS, "/");

  server.on("/", HTTP_POST, [](AsyncWebServerRequest *request)
            {
    int params = request->params();
    for (int i = 0; i < params; i++)
    {
      AsyncWebParameter *p = request->getParam(i);
      if (p->isPost())
      {
        // HTTP POST ssid value
        if (p->name() == PARAM_INPUT_1)
        {
          ssid = p->value().c_str();
          EEPROM.put(SSID_ADDRESS, ssid);
          delay(5);
          EEPROM.commit();
          delay(5);
          Serial.print("SSID set to: ");
          Serial.println(ssid);
        }
        // HTTP POST pass value
        if (p->name() == PARAM_INPUT_2)
        {
          pass = p->value().c_str();
          EEPROM.put(PASS_ADDRESS, pass);
           delay(5);
          EEPROM.commit();
           delay(5);
          Serial.print("Password set to: ");
          Serial.println(pass);
        }
      }
    }

    request->send(SPIFFS, "/isDone.html", "text/html");
    lcd16x2.clear();
    lcdPrint(2);
    lcd16x2.setCursor(0, 1);
    isWiFiDone = true; });
  server.begin();
}

void scanNetworks()
{
  Serial.println("scan start");
  selectSsid = "<select id='ssid' name='ssid'>";
  selectSsid += "<option value = 'Chọn wifi' selected>Chọn wifi</ option>";
  int n = WiFi.scanNetworks();
  Serial.println("scan done");
  if (n <= 0)
  {
    Serial.println("no networks found");
    selectSsid = "<input type='text' id='ssid' name='ssid' value='" + ssid + "'/>";
  }
  else
  {
    Serial.print(n);
    Serial.println(" networks found");
    for (int i = 0; i < n; ++i)
    {
      Serial.print(i + 1);
      selectSsid += "<option value ='" + WiFi.SSID(i) + "'";
      if (ssid.equals(WiFi.SSID(i)))
        selectSsid += " selected";
      selectSsid += ">" + WiFi.SSID(i) + "</ option>";
      Serial.print(": ");
      Serial.print(WiFi.SSID(i));
      Serial.print(" (");
      Serial.print(WiFi.RSSI(i));
      Serial.print(")");
      Serial.println((WiFi.encryptionType(i) == WIFI_AUTH_OPEN) ? " " : "*");
    }
    selectSsid += "</select>";
  }
}

void wifiManager()
{
  // Connect to Wi-Fi network with SSID and password
  Serial.println("Setting AP (Access Point)");
  // NULL sets an open Access Point
  WiFi.mode(WIFI_AP);
  delay(2000);
  IPAddress IP = WiFi.softAPIP();
  lcd16x2.setCursor(0, 0);
  lcd16x2.print("IP: ");
  lcd16x2.print(IP);
  lcd16x2.print(" ");

  // WiFi.softAPConfig(IP, IP, IPAddress(255, 255, 255, 0));
  WiFi.softAP("WIFI_N11", "123456789");
  // dnsServer.start(DNS_PORT, "*", IP);

  Serial.print("AP IP address: ");
  Serial.println(IP);
  setupServer();
}

void lcdPrint(char mode)
{
  if (mode == 0) // print wifi status, PPM, PPMThresold
  {
    lcd16x2.setCursor(0, 0);
    lcd16x2.print("WiFi: ");

    if (WiFi.status() == WL_CONNECTED)
    {
      digitalWrite(LED_PIN, 1);
      lcd16x2.print("Connected ");
    }
    else
    {
      digitalWrite(LED_PIN, 0);
      lcd16x2.print("Disconnect");
      if (isWiFi == true)
      {
        isWiFi = false;
        EEPROM.put(IS_WIFI_ADDRESS, isWiFi);
        delay(5);
        EEPROM.commit();
        delay(5);
      }
    }
    lcd16x2.setCursor(0, 1);
    lcd16x2.print("PPM: ");
    lcd16x2.print(PPMThresold);
    lcd16x2.print("|");
    lcd16x2.print(PPMval);
    lcd16x2.print("     ");
    return;
  }
  if (mode == 1)
  {
    lcd16x2.setCursor(0, 0);
    lcd16x2.print("Set PPMThresold");
    return;
  }

  if (mode == 2)
  {
    lcd16x2.setCursor(0, 0);
    lcd16x2.print("SETTING WIFI...");
    return;
  }
  if (mode == 3)
  {
    lcd16x2.setCursor(0, 0);
    lcd16x2.print("Finding Ro...");
    return;
  }
}

float findRo()
{
  unsigned char i = 1;
  float RoFinded = 0;
  float Ro = 0;
  lcd16x2.clear();
  lcdPrint(3);
  Serial.println("Finding Ro");
  for (i = 1; i <= CALIBARAION_SAMPLE_TIMES; i++)
  {
    RoFinded += findRs();
    delay(CALIBRATION_SAMPLE_INTERVAL);
  }
  RoFinded = RoFinded / CALIBARAION_SAMPLE_TIMES;
  Serial.println(RoFinded);
  RoFinded = RoFinded / CLEAN_AIR_RAITO;

  Serial.print("Ro finded: ");
  Serial.println(RoFinded);
  EEPROM.put(RO_VALUE_ADDRESS, RoFinded);
  delay(5);
  EEPROM.commit();
  delay(5);
  EEPROM.get(RO_VALUE_ADDRESS, Ro);
  delay(5);
  Serial.print("Ro from EEPROM: ");
  Serial.println(Ro);
  lcd16x2.setCursor(0, 1);
  lcd16x2.print("Ro:");
  lcd16x2.print(Ro);
  delay(2000);
  lcd16x2.clear();
  return RoFinded;
}
float findRs()
{
  float RsFinded = 0;
  float Vmq = ADC_LUT[analogRead(MQ_PIN)];
  RsFinded = ((R6 * RL * VIN) / (Vmq * (R6 + R5))) - RL;
  return RsFinded;
}
int findPPM()
{
  unsigned char i = 1;
  float PPMval = 0;
  float Rs = 0;
  for (i = 1; i <= READ_SAMPLE_INTERVAL; i++)
  {
    Rs += findRs();
    delay(READ_SAMPLE_TIMES);
  }
  Rs = Rs / READ_SAMPLE_INTERVAL;
  PPMval = pow(10, (log10(Rs / Ro) - 1.3307) / -0.479);
  if (PPMval < 300)
    PPMval = 0;
  else if (PPMval > 10000)
    PPMval = 10000;
  return PPMval;
}

void reconnect()
{
  while (!pubSubClient.connected()) // Chờ tới khi kết nối
  {
    // Thực hiện kết nối với mqtt user và pass
    if (pubSubClient.connect("ESP32Client", MQTT_USER, MQTT_PWD)) // kết nối vào broker
    {
      Serial.println("MQTT Broker connected");
      pubSubClient.subscribe("gas/change/PPMThresold");
    }
    else
    {
      Serial.print("Lỗi:, rc=");
      Serial.print(pubSubClient.state());
      Serial.println("Thu lai sau 5s");
      // Đợi 5s
      delay(5000);
    }
  }
}

void sendPPMval()
{
  if ((unsigned long)(millis() - currentTimeSendPPMval) >= SEND_PPM_VALUE_INTERVAL)
  {
    createJson();
    pubSubClient.publish("gas/general", cstr);
    currentTimeSendPPMval = millis();
  }
}

void createJson()
{
  jsonBuffer["PPMval"] = PPMval;
  jsonBuffer["PPMThresold"] = PPMThresold;
  jsonBuffer["isAlarm"] = isAlarm;
  JsonObject rootJson = jsonBuffer.as<JsonObject>();
  serializeJson(rootJson, cstr);
  Serial.println(cstr);
}

// Hàm call back để nhận dữ liệu
void callback(char *topic, byte *payload, unsigned int length)
{
  char pay[255];
  for (int i = 0; i < length; i++)
  {
    pay[i] = 0;
    pay[i] = (char)payload[i];
  }
  Serial.println(pay);
  deserializeJson(doc, pay);             // Khởi tạo một document có kích thước động là 2kb để phân tích chuỗi Json truyền vào
  JsonObject obj = doc.as<JsonObject>(); // Tạo 1 obj có kiểu dữ liệu là JsonObject với document vừa tạo
  byte idtp = obj["idtp"];               // ID Topic

  switch (idtp)
  {
  case 2:
    PPMThresold = obj["PPMThresold"];
    EEPROM.put(PPMTHRESOLD_VALUE_ADDRESS, PPMThresold);
    delay(5);
    EEPROM.commit();
    delay(5);
    createJson();
    pubSubClient.publish("gas/feedback/PPMThresold", (char *)cstr);
    break;
  default:
    break;
  }
}

void setupWiFi(char mode)
{
  isWiFiDone = false;
  if (mode == 0)
  {
    if (isWiFi)
    {
      lcd16x2.clear();
      lcdPrint(2);
      if (!configWiFiMqtt())
      {
        changeWiFi();
      }
      return;
    }

    if (WiFi.status() == WL_CONNECTED)
    {
      WiFi.disconnect();
      pubSubClient.disconnect();
    }
    return;
  }
  if (mode == 1)
  {
    lcd16x2.clear();
    changeWiFi();
  }
  digitalWrite(LED_PIN, 0);
  lcd16x2.clear();
}

bool configWiFiMqtt()
{
  if (initWiFi())
  {
    isWiFi = true;
    pubSubClient.setServer(MQTT_SERVER, MQTT_PORT);
    pubSubClient.setCallback(callback);
    lcd16x2.clear();
    lcd16x2.setCursor(0, 0);
    lcd16x2.print("Setting MQTT...");
    delay(1000);
    reconnect();
    lcd16x2.clear();
    lcd16x2.setCursor(0, 0);
    EEPROM.put(IS_WIFI_ADDRESS, isWiFi);
    delay(5);
    EEPROM.commit();
    delay(5);
    lcd16x2.print("Done!!!");
    isWiFiDone = true;
    delay(1000);
    blink(3);

    return true;
  }
  isWiFi = false;
  EEPROM.put(IS_WIFI_ADDRESS, isWiFi);
  delay(5);
  EEPROM.commit();
  delay(5);
  return false;
}

void changeWiFi()
{
  int counter = 120;
  unsigned long currentMillis = millis();
  unsigned long previousMillis2 = 0;
  previousMillis2 = currentMillis;
  previousMillis = currentMillis;
  lcd16x2.setCursor(0, 0);
  lcd16x2.print("Scanning WIFI...");

  scanNetworks();
  wifiManager();
  lcd16x2.setCursor(0, 1);
  lcd16x2.print("WIFI_N11 | ");
  lcd16x2.print(counter);
  while (isWiFiDone == false)
  {
    char keyPressed = readKeypad();
    if (keyPressed != 0)
      Serial.println(keyPressed);

    if (keyPressed == 'D')
    {
      lcd16x2.setCursor(0, 1);
      lcd16x2.print("Break !!      ");
      delay(1000);
      break;
    }
    currentMillis = millis();
    if ((unsigned long)(currentMillis - previousMillis2) >= 1000)
    {
      counter--;
      previousMillis2 = millis();
      lcd16x2.setCursor(11, 1);
      lcd16x2.print(counter);
      lcd16x2.print("s   ");
      !digitalRead(LED_PIN) ? digitalWrite(LED_PIN, 1) : digitalWrite(LED_PIN, 0);
    }
    if (counter == 0)
    {

      lcd16x2.setCursor(0, 1);
      lcd16x2.print("Failed !      ");
      Serial.println("");
      delay(2000);
      lcd16x2.clear();
      isWiFiDone = true;
      configWiFiMqtt();
      return;
    }
  }
  configWiFiMqtt();
}

void setPPMThresold()
{
  int counter = 120;
  bool blink_lcd = false;
  char digit = 0;
  bool setPPMDone = false;
  char k = 0;
  unsigned long PPMThresold_temp = 0;
  String PPMString;
  lcd16x2.clear();
  lcdPrint(1);
  Serial.println("Set PPMThresold");
  lcd16x2.setCursor(8, 1);
  lcd16x2.print(",");
  lcd16x2.setCursor(0, 1);
  unsigned long currentMillis = millis();
  previousMillis = currentMillis;

  while (setPPMDone == false)
  {
    currentMillis = millis();
    if ((unsigned long)(currentMillis - previousMillis) >= 1000)
    {
      blink_lcd = !blink_lcd;
      counter--;
      previousMillis = currentMillis;
    }
    if (blink_lcd)
    {
      lcd16x2.setCursor(9, 1);
      lcd16x2.print(counter);
      lcd16x2.print("s     ");
    }
    else
    {
      lcd16x2.setCursor(9, 1);
      lcd16x2.print("D: DONE");
    }
    if (counter == 0)
      break;
    k = readKeypad();
    if (k >= '0' && k <= '9' && digit <= 4)
    {
      lcd16x2.setCursor(0, 1);
      PPMString += k;
      Serial.println(k);
      lcd16x2.print(PPMString);
      digit++;
    }
    else if (k == 'D')
    {
      PPMThresold_temp = PPMString.toInt();
      if (PPMThresold_temp >= 300 && PPMThresold_temp <= 10000 && PPMString.length() > 0)
      {
        EEPROM.put(PPMTHRESOLD_VALUE_ADDRESS, PPMThresold_temp);
        delay(5);
        EEPROM.commit();
        delay(5);
        setPPMDone = true;
        Serial.println("Set done");
        Serial.print("Setted PPM thresold: ");
        Serial.println(PPMThresold_temp);
        EEPROM.get(PPMTHRESOLD_VALUE_ADDRESS, PPMThresold);
        delay(5);
        Serial.print("Setted PPM thresold from EEPROM: ");
        Serial.println(PPMThresold);
        lcd16x2.clear();
        lcdPrint(1);
        lcd16x2.setCursor(0, 1);
        lcd16x2.print("DONE: ");
        lcd16x2.print(PPMThresold);
        delay(2000);
      }
      else
      {
        lcd16x2.setCursor(0, 1);
        lcd16x2.print("PPM out of range");
        delay(2000);
        Serial.println("PPM outOf range");
        PPMString = "";
        break;
      }
    }
  }
  blink(2);
  lcd16x2.clear();
}

bool debounceButton(char pin)
{
  int State = 0x0000;
  for (char shift = 0; shift < 16; shift++)
  {
    State = State | digitalRead(pin);
    State = State << 1;
  }
  if (State == 0x0000)
    return true;
  return false;
}

char readKeypad()
{
  char k = 0;
  for (char c = 0; c < NUM_COL; c++)
  {
    digitalWrite(COL_PINS[c], LOW);
    for (char r = 0; r < NUM_ROW; r++)
    {
      if (debounceButton(ROW_PINS[r]) == true && pushed[r][c] == false)
      {
        pushed[r][c] = true;
        k = KEYS[r][c];
      }
      else if (debounceButton(ROW_PINS[r]) == false && pushed[r][c] == true)
      {
        pushed[r][c] = false;
      }
    }
    digitalWrite(COL_PINS[c], HIGH);
  }
  return k;
}